const {
  ERROR_INTERNAL_SERVER_ERROR,
  ERROR_BAD_REQUEST,
} = require('../constants/error-codes');
const {
  ERROR_MONGO_CAST_ERROR,
  ERROR_MONGO_DUPLICATE_FIELD,
} = require('../constants/mongo-errors');
const AppError = require('../utils/app-error');

const DEFAULT_ERROR_STATUS_CODE = 500;

const handleMongoCaseError = (err) => {
  const message = `Invalid ${err.path}: ${err.value}`;
  return new AppError(message, ERROR_BAD_REQUEST);
};

const handleMongoDuplicateFieldError = (err) => {
  const message = `Duplicate field value: ${err.keyValue.name}. Please use another value.`;
  return new AppError(message, ERROR_BAD_REQUEST);
};

const sendDevelopmentError = (err, res) => {
  const { statusCode = DEFAULT_ERROR_STATUS_CODE } = err;

  res.status(statusCode).json({
    ok: false,
    error: { message: err.message, stack: err.stack, error: err },
  });
};

const sendProductionError = (err, res) => {
  const { statusCode = DEFAULT_ERROR_STATUS_CODE } = err;

  // Operational errors (generated by server)
  if (err.isOperational) {
    res.status(statusCode).json({
      ok: false,
      error: { message: err.message },
    });
    return;
  }

  console.error(`ðŸ”´ ERROR: ${JSON.stringify(err)}`);

  // programming errors
  res.status(ERROR_INTERNAL_SERVER_ERROR).json({
    ok: false,
    error: { message: 'Something went wrong!.' },
  });
};

module.exports = (err, req, res, next) => {
  if (process.env.NODE_ENV === 'development') {
    sendDevelopmentError(err, res);
    return;
  }

  let error = { ...err, name: err.name };

  if (error.name === ERROR_MONGO_CAST_ERROR) {
    error = handleMongoCaseError(error);
  }

  if (error.code === ERROR_MONGO_DUPLICATE_FIELD) {
    error = handleMongoDuplicateFieldError(error);
  }

  sendProductionError(error, res);
};
